#include <stdlib.h>
#include <stdio.h>
#include "String.h"
#include "StringUtil.h"

using namespace vs;

String::String(int volume, const char *src, int length)
{
    this->volume = volume;
    //分配volume大小的容量
    this->p = (char *)malloc(sizeof(char)*volume);
    this->length = 0;
    this->append(src, length);
}

String::String(int volume, const char *src)
{
    this->volume = volume;
    //分配volume大小的容量
    this->p = (char *)malloc(sizeof(char)*volume);
    this->length = 0;
    this->append(src);
}

void String::show()
{
    printf("%s\n", this->p);
}

/**
 * 获得字符串的长度
 */
int String::getLength()
{
    return this->length;
}

/**
 * 获得字符串的空间容量
 */
int String::getVolume()
{
    return this->volume;
}

/**
 * src必须要以\0结束
 *
 */
void String::append(const char *src)
{
    int strLen = StringUtil::Length(src);
    this->append(src, strLen);
}

/**
 * 再字符串的后面追加字符串
 */
void String::append(const char *src, int strLen)
{
    //容量不够，需要扩充容量
    if(strLen + this->length > this->volume + 1)
    {
        //扩展的容量方式为，自身容量+自身容量*1/3+strLen
        int newVolume = this->volume + this->volume/3 + strLen;
        char* newP = (char *)realloc(this->p, newVolume);
        if(newP != NULL)
        {
            this->p = newP;
            this->volume = newVolume;
        }
    }
    char *pTmp = this->p + this->length;
    int i = 0;
    while(i < strLen)
    {
        *pTmp = *src;
        src++;
        pTmp++;
        this->length++;
        i++;
    }
    *pTmp = '\0';   //最后一个字符放置结束符
}

void String::append(String *src)
{
    char *pSrc = src->pointer(0);
    this->append(pSrc);
}

char* String::pointer(int offset)
{
    return this->p + offset;
}

/**
 * 按sep分隔字符串，返回String数组的首地址
 */
VsObjectArray<String>* String::split(char sep)
{
    VsObjectArray<String>* oa = new VsObjectArray<String>(8);
    int jCount = 0;
    char *tmp = this->p;
    int length = this->length;
    for(int j = 0; j < length; j++)
    {
        char jChar = this->p[j];
        if(jChar == sep || j == length - 1) //号码结束
        {
            if(j == length - 1 && jChar != sep) //如果到了号码末尾，需要把最后一个字符加进来
            {
                jCount++;
            }

            String* str = new String(20, tmp, jCount);
            oa->put(str);

            jCount = 0; //号码长度重新计算
            if(j < length - 1)
            {
                tmp = this->p + j + 1;
            }
        }
        else
        {
            jCount++;
        }
    }
    return oa;
}

String::~String()
{
    printf("destroy string-------------\n");
    free(this->p);
}
