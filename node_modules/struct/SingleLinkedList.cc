#include <stdlib.h>
#include <stdio.h>

#include "SingleLinkedList.h"

SingleLinkedList::SingleLinkedList()
{
    this->init();
}

void SingleLinkedList::init()
{
    this->head = NULL;  //空的链表
}

/**
 * 通过id查找节点
 */
SingleLinkedNode* SingleLinkedList::findById(int id)
{
    return NULL;
}

/**
 * 插入节点，按id排序
 */
void SingleLinkedList::insert(SingleLinkedNode* node)
{
    if(this->head == NULL)  //如果链表为空，node作为头节点
    {
        this->head = node;
        return;
    }
    SingleLinkedNode* p = this->head;
    SingleLinkedNode* q = NULL;
    while(p->id < node->id)
    {
        q = p;
        p = p->next;
        if(p == NULL)
        {
            break;
        }
    }
    //说明所有的节点的值都比node的id大，把node作为头节点
    if(q == NULL)
    {
        node->next = this->head;
        this->head = node;
    }
    else    //移动节点
    {
        q->next = node;
        node->next = p;
    }
}

/**
 * 遍历整个列表
 */
void SingleLinkedList::traverse()
{
    if(this->head == NULL)
    {
        printf("整个链表为空\n");
    }
    else
    {
        SingleLinkedNode* tmp = this->head;
        while(tmp)
        {
            printf("%d-", tmp->id);
            tmp = tmp->next;
        }
        printf("end\n");
    }
}

/**
 * 单链表的空间释放，从头节点遍历，依次释放
 */
SingleLinkedList::~SingleLinkedList()
{
    SingleLinkedNode* tmp = this->head;
    while(tmp != NULL)
    {
        SingleLinkedNode* next = tmp->next;
        delete tmp;
        tmp = next;
    }
    printf("list destroyed...............\n");
}